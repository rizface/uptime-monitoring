package templates

import (
	"fmt"
	"strconv"
	"uptime-monitoring/models"
)

templ Dashboard(urls []models.URL) {
	@Layout("Dashboard") {
		<div class="min-h-screen bg-slate-950 p-6">
			<!-- Header Section -->
			<div class="mb-8">
				<div class="flex justify-between items-center mb-2">
					<h1 class="text-3xl font-bold text-white">Dashboard</h1>
					<div class="flex space-x-3">
						<button id="check-all-btn" class="bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded-lg text-white font-medium transition-all duration-200 shadow-lg hover:shadow-blue-500/25">
							Check All
						</button>
						<button id="add-url-btn" class="bg-green-600 hover:bg-green-700 px-4 py-2 rounded-lg text-white font-medium transition-all duration-200 shadow-lg hover:shadow-green-500/25">
							+ Add URL
						</button>
					</div>
				</div>
				<p class="text-slate-400">Monitor your websites and APIs in real-time</p>
			</div>

			<!-- Stats Overview -->
			<div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
				<div class="bg-slate-800 rounded-xl p-6 border border-slate-700">
					<div class="flex items-center justify-between">
						<div>
							<p class="text-slate-400 text-sm font-medium">Total URLs</p>
							<p class="text-2xl font-bold text-white mt-1">{ fmt.Sprintf("%d", len(urls)) }</p>
						</div>
						<div class="bg-blue-500/10 p-3 rounded-lg">
							<svg class="w-6 h-6 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path>
							</svg>
						</div>
					</div>
				</div>
				<div class="bg-slate-800 rounded-xl p-6 border border-slate-700">
					<div class="flex items-center justify-between">
						<div>
							<p class="text-slate-400 text-sm font-medium">Online</p>
							<p class="text-2xl font-bold text-green-400 mt-1">
								{ fmt.Sprintf("%d", func() int {
									count := 0
									for _, url := range urls {
										if url.Status == "up" {
											count++
										}
									}
									return count
								}()) }
							</p>
						</div>
						<div class="bg-green-500/10 p-3 rounded-lg">
							<svg class="w-6 h-6 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
							</svg>
						</div>
					</div>
				</div>
				<div class="bg-slate-800 rounded-xl p-6 border border-slate-700">
					<div class="flex items-center justify-between">
						<div>
							<p class="text-slate-400 text-sm font-medium">Offline</p>
							<p class="text-2xl font-bold text-red-400 mt-1">
								{ fmt.Sprintf("%d", func() int {
									count := 0
									for _, url := range urls {
										if url.Status == "down" {
											count++
										}
									}
									return count
								}()) }
							</p>
						</div>
						<div class="bg-red-500/10 p-3 rounded-lg">
							<svg class="w-6 h-6 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
							</svg>
						</div>
					</div>
				</div>
			</div>

			<!-- Monitored URLs Section -->
			<div class="mb-6">
				<h2 class="text-xl font-semibold text-white mb-4">Monitored URLs</h2>
				if len(urls) == 0 {
					<div class="bg-slate-800 rounded-xl p-12 border border-slate-700 text-center">
						<div class="bg-slate-700 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4">
							<svg class="w-8 h-8 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path>
							</svg>
						</div>
						<h3 class="text-lg font-medium text-white mb-2">No URLs monitored yet</h3>
						<p class="text-slate-400 mb-6">Start monitoring your websites and APIs by adding your first URL</p>
						<button id="add-first-url-btn" class="inline-flex items-center px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-all duration-200 shadow-lg hover:shadow-blue-500/25">
							<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
							</svg>
							Add Your First URL
						</button>
					</div>
				} else {
					<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
						for _, url := range urls {
							<div class="bg-slate-800 rounded-xl p-6 border border-slate-700 hover:border-slate-600 transition-all duration-200 hover:shadow-lg">
								<!-- Status Indicator -->
								<div class="flex items-center justify-between mb-4">
									<div class="flex items-center space-x-2">
										if url.Status == "up" {
											<div class="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
											<span class="text-green-400 text-sm font-medium">Online</span>
										} else if url.Status == "down" {
											<div class="w-3 h-3 bg-red-500 rounded-full"></div>
											<span class="text-red-400 text-sm font-medium">Offline</span>
										} else if url.Status == "unauthorized" {
											<div class="w-3 h-3 bg-orange-500 rounded-full"></div>
											<span class="text-orange-400 text-sm font-medium">Unauthorized</span>
										} else if url.Status == "forbidden" {
											<div class="w-3 h-3 bg-purple-500 rounded-full"></div>
											<span class="text-purple-400 text-sm font-medium">Forbidden</span>
										} else {
											<div class="w-3 h-3 bg-yellow-500 rounded-full"></div>
											<span class="text-yellow-400 text-sm font-medium">Unknown</span>
										}
									</div>
									if url.ResponseTime > 0 {
										<span class="text-slate-400 text-sm">{ fmt.Sprintf("%dms", url.ResponseTime) }</span>
									}
								</div>

								<!-- URL Info -->
								<div class="mb-4">
									<div class="flex items-center space-x-3 mb-2">
										<img src={ "https://t0.gstatic.com/faviconV2?client=SOCIAL&type=FAVICON&fallback_opts=TYPE,SIZE,URL&url=" + url.URL + "&size=24" } alt="Website icon" class="w-6 h-6 rounded-sm flex-shrink-0" onerror="this.style.display='none'"/>
										<h3 class="text-lg font-semibold text-white truncate">{ url.Name }</h3>
									</div>
									<p class="text-slate-400 text-sm truncate ml-9">{ url.URL }</p>
								</div>

								<!-- Last Checked -->
								if url.LastChecked != nil {
									<div class="mb-4">
										<p class="text-slate-500 text-xs">Last checked</p>
										<p class="text-slate-400 text-sm">{ url.LastChecked.Format("Jan 2, 15:04") }</p>
									</div>
								}

								<!-- Action Buttons -->
								<div class="flex space-x-2">
									<button data-check-url={ strconv.FormatUint(uint64(url.ID), 10) } class="check-url-btn flex-1 bg-blue-600 hover:bg-blue-700 text-white text-sm py-2 px-3 rounded-lg transition-all duration-200 font-medium">
										Check
									</button>
									<a href={ templ.URL("/edit/" + strconv.FormatUint(uint64(url.ID), 10)) } class="flex-1 bg-slate-600 hover:bg-slate-700 text-white text-sm py-2 px-3 rounded-lg transition-all duration-200 font-medium text-center">
										Edit
									</a>
									<button data-delete-url={ strconv.FormatUint(uint64(url.ID), 10) } class="delete-url-btn bg-red-600 hover:bg-red-700 text-white text-sm py-2 px-3 rounded-lg transition-all duration-200">
										<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
										</svg>
									</button>
								</div>
							</div>
						}
					</div>
				}
			</div>

			<!-- Add URL Modal -->
			<div id="add-url-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
				<div class="flex items-center justify-center min-h-screen p-4">
					<div class="bg-slate-800 rounded-xl p-6 w-full max-w-md border border-slate-700">
						<div class="flex justify-between items-center mb-4">
							<h3 class="text-lg font-semibold text-white">Add New URL</h3>
							<button id="close-modal" class="text-slate-400 hover:text-white">
								<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
								</svg>
							</button>
						</div>
						<form action="/add" method="POST" class="space-y-4">
							<div>
								<label for="name" class="block text-sm font-medium text-slate-300 mb-2">Name</label>
								<input type="text" id="name" name="name" required class="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="My Website">
							</div>
							<div>
								<label for="url" class="block text-sm font-medium text-slate-300 mb-2">URL</label>
								<input type="url" id="url" name="url" required class="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="https://example.com">
							</div>
							<div>
								<label for="check_interval" class="block text-sm font-medium text-slate-300 mb-2">Check Interval (seconds)</label>
								<input type="number" id="check_interval" name="check_interval" min="60" value="300" class="w-full px-3 py-2 bg-slate-700 border border-slate-600 rounded-lg text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
							</div>
							<div class="flex space-x-3 pt-4">
								<button type="button" id="cancel-modal" class="flex-1 px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white rounded-lg transition-all duration-200">Cancel</button>
								<button type="submit" class="flex-1 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-all duration-200">Add URL</button>
							</div>
						</form>
					</div>
				</div>
			</div>

			<!-- Delete Confirmation Modal -->
			<div id="delete-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
				<div class="flex items-center justify-center min-h-screen p-4">
					<div class="bg-slate-800 rounded-xl p-6 w-full max-w-md border border-slate-700">
						<div class="flex items-center mb-4">
							<div class="w-12 h-12 bg-red-100 rounded-full flex items-center justify-center mr-4">
								<svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
								</svg>
							</div>
							<div>
								<h3 class="text-lg font-semibold text-white mb-1">Delete URL</h3>
								<p class="text-slate-400 text-sm">Are you sure you want to delete this URL? This action cannot be undone.</p>
							</div>
						</div>
						<div class="flex space-x-3 pt-4">
							<button type="button" id="cancel-delete" class="flex-1 px-4 py-2 bg-slate-600 hover:bg-slate-700 text-white rounded-lg transition-all duration-200">Cancel</button>
							<button type="button" id="confirm-delete" class="flex-1 px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-all duration-200">Delete</button>
						</div>
					</div>
				</div>
			</div>
		</div>

		<script>
			// Modal functionality
			const modal = document.getElementById('add-url-modal');
			const addUrlBtn = document.getElementById('add-url-btn');
			const addFirstUrlBtn = document.getElementById('add-first-url-btn');
			const closeModal = document.getElementById('close-modal');
			const cancelModal = document.getElementById('cancel-modal');

			// Delete modal functionality
			const deleteModal = document.getElementById('delete-modal');
			const cancelDelete = document.getElementById('cancel-delete');
			const confirmDelete = document.getElementById('confirm-delete');
			let urlToDelete = null;

			// Open modal
			if (addUrlBtn) {
				addUrlBtn.addEventListener('click', () => {
					modal.classList.remove('hidden');
				});
			}

			if (addFirstUrlBtn) {
				addFirstUrlBtn.addEventListener('click', () => {
					modal.classList.remove('hidden');
				});
			}

			// Close modal
			closeModal.addEventListener('click', () => {
				modal.classList.add('hidden');
			});

			cancelModal.addEventListener('click', () => {
				modal.classList.add('hidden');
			});

			// Close modal when clicking outside
			modal.addEventListener('click', (e) => {
				if (e.target === modal) {
					modal.classList.add('hidden');
				}
			});

			// Delete modal event listeners
			cancelDelete.addEventListener('click', () => {
				deleteModal.classList.add('hidden');
				urlToDelete = null;
			});

			confirmDelete.addEventListener('click', async () => {
				if (urlToDelete) {
					try {
						const response = await fetch(`/api/urls/${urlToDelete}`, { method: 'DELETE' });
						if (response.ok) {
							location.reload();
						} else {
							alert('Failed to delete URL');
						}
					} catch (error) {
						alert('Error deleting URL');
					}
					deleteModal.classList.add('hidden');
					urlToDelete = null;
				}
			});

			// Close delete modal when clicking outside
			deleteModal.addEventListener('click', (e) => {
				if (e.target === deleteModal) {
					deleteModal.classList.add('hidden');
					urlToDelete = null;
				}
			});

			// Existing functionality
			document.addEventListener('DOMContentLoaded', function() {
				// Check single URL
				document.querySelectorAll('.check-url-btn').forEach(btn => {
					btn.addEventListener('click', async function() {
						const id = this.getAttribute('data-check-url');
						try {
							const response = await fetch(`/api/check/${id}`, { method: 'POST' });
							if (response.ok) {
								location.reload();
							} else {
								alert('Failed to check URL');
							}
						} catch (error) {
							alert('Error checking URL');
						}
					});
				});

				// Check all URLs
				const checkAllBtn = document.getElementById('check-all-btn');
				if (checkAllBtn) {
					checkAllBtn.addEventListener('click', async function() {
						try {
							const response = await fetch('/api/check-all', { method: 'POST' });
							if (response.ok) {
								location.reload();
							} else {
								alert('Failed to check URLs');
							}
						} catch (error) {
							alert('Error checking URLs');
						}
					});
				}

				// Delete URL
				document.querySelectorAll('.delete-url-btn').forEach(btn => {
					btn.addEventListener('click', function() {
						const id = this.getAttribute('data-delete-url');
						urlToDelete = id;
						deleteModal.classList.remove('hidden');
					});
				});
			});
		</script>
	}
}