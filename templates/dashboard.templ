package templates

import (
	"fmt"
	"strconv"
	"uptime-monitoring/models"
)

templ Dashboard(urls []models.URL) {
	@Layout("Dashboard") {
		<div class="min-h-screen">
			<!-- Hero Section -->
			<div class="mb-12">
				<div class="text-center mb-8">
					<h1 class="text-4xl md:text-5xl font-bold text-slate-100 mb-4">
						Uptime <span class="text-accent-400">Dashboard</span>
					</h1>
					<p class="text-slate-400 text-lg max-w-2xl mx-auto">
						Monitor your websites and APIs in real-time with comprehensive uptime tracking
					</p>
				</div>
				<div class="flex justify-center space-x-4">
					<button id="check-all-btn" class="bg-accent-600 hover:bg-accent-700 px-6 py-3 rounded-xl text-white font-semibold transition-all duration-300 glow-accent hover:scale-105 flex items-center space-x-2">
						<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
						</svg>
						<span>Check All</span>
					</button>
					<button id="add-url-btn" class="bg-green-600 hover:bg-green-700 px-6 py-3 rounded-xl text-white font-semibold transition-all duration-300 glow-green hover:scale-105 flex items-center space-x-2">
						<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
						</svg>
						<span>Add URL</span>
					</button>
				</div>
			</div>

			<!-- Stats Overview -->
			<div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-12">
				<div class="glass-effect rounded-2xl p-6 hover:bg-dark-800/50 transition-all duration-300">
					<div class="flex items-center justify-between mb-4">
						<div class="bg-accent-500/20 p-3 rounded-xl">
							<svg class="w-6 h-6 text-accent-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path>
							</svg>
						</div>
					</div>
					<div>
						<p class="text-slate-400 text-sm font-medium mb-2">Total Monitored</p>
						<p class="text-3xl font-bold text-slate-100">{ fmt.Sprintf("%d", len(urls)) }</p>
					</div>
				</div>
				<div class="glass-effect rounded-2xl p-6 hover:bg-dark-800/50 transition-all duration-300">
					<div class="flex items-center justify-between mb-4">
						<div class="bg-green-500/20 p-3 rounded-xl">
							<svg class="w-6 h-6 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
							</svg>
						</div>
					</div>
					<div>
						<p class="text-slate-400 text-sm font-medium mb-2">Online</p>
						<p class="text-3xl font-bold text-green-400">
							{ fmt.Sprintf("%d", func() int {
								count := 0
								for _, url := range urls {
									if url.Status == "up" {
										count++
									}
								}
								return count
							}()) }
						</p>
					</div>
				</div>
				<div class="glass-effect rounded-2xl p-6 hover:bg-dark-800/50 transition-all duration-300">
					<div class="flex items-center justify-between mb-4">
						<div class="bg-red-500/20 p-3 rounded-xl">
							<svg class="w-6 h-6 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
							</svg>
						</div>
					</div>
					<div>
						<p class="text-slate-400 text-sm font-medium mb-2">Offline</p>
						<p class="text-3xl font-bold text-red-400">
							{ fmt.Sprintf("%d", func() int {
								count := 0
								for _, url := range urls {
									if url.Status == "down" {
										count++
									}
								}
								return count
							}()) }
						</p>
					</div>
				</div>
				<div class="glass-effect rounded-2xl p-6 hover:bg-dark-800/50 transition-all duration-300">
					<div class="flex items-center justify-between mb-4">
						<div class="bg-orange-500/20 p-3 rounded-xl">
							<svg class="w-6 h-6 text-orange-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
							</svg>
						</div>
					</div>
					<div>
						<p class="text-slate-400 text-sm font-medium mb-2">Unknown</p>
						<p class="text-3xl font-bold text-orange-400">
							{ fmt.Sprintf("%d", func() int {
								count := 0
								for _, url := range urls {
									if url.Status != "up" && url.Status != "down" {
										count++
									}
								}
								return count
							}()) }
						</p>
					</div>
				</div>
			</div>

			<!-- Monitored URLs Section -->
			if len(urls) == 0 {
				<div class="glass-effect rounded-3xl p-16 text-center">
					<div class="bg-accent-500/20 w-20 h-20 rounded-2xl flex items-center justify-center mx-auto mb-6">
						<svg class="w-10 h-10 text-accent-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path>
						</svg>
					</div>
					<h3 class="text-2xl font-bold text-slate-100 mb-3">Start Monitoring</h3>
					<p class="text-slate-400 text-lg mb-8 max-w-md mx-auto">No URLs are being monitored yet. Add your first website or API to get started with uptime tracking.</p>
					<button id="add-first-url-btn" class="inline-flex items-center px-8 py-4 bg-accent-600 hover:bg-accent-700 text-white font-semibold rounded-xl transition-all duration-300 glow-accent hover:scale-105">
						<svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
						</svg>
						Add Your First URL
					</button>
				</div>
			} else {
				<div class="mb-8">
					<h2 class="text-2xl font-bold text-slate-100 mb-6 text-center">Your Monitored URLs</h2>
					<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
						for _, url := range urls {
							<div class="glass-effect rounded-2xl p-6 hover:bg-dark-800/50 transition-all duration-300 group">
								<!-- Status Header -->
								<div class="flex items-center justify-between mb-6">
									<div class="flex items-center space-x-3">
										if url.Status == "up" {
											<div class="w-4 h-4 bg-green-500 rounded-full animate-pulse-slow"></div>
											<span class="text-green-400 font-semibold">Online</span>
										} else if url.Status == "down" {
											<div class="w-4 h-4 bg-red-500 rounded-full"></div>
											<span class="text-red-400 font-semibold">Offline</span>
										} else if url.Status == "unauthorized" {
											<div class="w-4 h-4 bg-orange-500 rounded-full"></div>
											<span class="text-orange-400 font-semibold">Unauthorized</span>
										} else if url.Status == "forbidden" {
											<div class="w-4 h-4 bg-purple-500 rounded-full"></div>
											<span class="text-purple-400 font-semibold">Forbidden</span>
										} else {
											<div class="w-4 h-4 bg-yellow-500 rounded-full"></div>
											<span class="text-yellow-400 font-semibold">Unknown</span>
										}
									</div>
									if url.ResponseTime > 0 {
										<div class="bg-dark-700/50 px-3 py-1 rounded-full">
											<span class="text-slate-300 text-sm font-medium">{ fmt.Sprintf("%dms", url.ResponseTime) }</span>
										</div>
									}
								</div>

								<!-- URL Info -->
								<div class="mb-6">
									<div class="flex items-center space-x-3 mb-3">
										<div class="w-10 h-10 bg-dark-700 rounded-xl flex items-center justify-center flex-shrink-0">
											<img src={ "https://t0.gstatic.com/faviconV2?client=SOCIAL&type=FAVICON&fallback_opts=TYPE,SIZE,URL&url=" + url.URL + "&size=24" } alt="Website icon" class="w-6 h-6 rounded-sm" onerror="this.style.display='none'"/>
											<svg class="w-5 h-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="display: none;">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9"></path>
											</svg>
										</div>
										<div class="flex-1 min-w-0">
											<h3 class="text-lg font-bold text-slate-100 truncate">{ url.Name }</h3>
											<p class="text-slate-400 text-sm truncate">{ url.URL }</p>
										</div>
									</div>
								</div>

								<!-- Last Checked -->
								if url.LastChecked != nil {
									<div class="mb-6 bg-dark-800/30 rounded-xl p-3">
										<p class="text-slate-500 text-xs font-medium mb-1">LAST CHECKED</p>
										<p class="text-slate-300 text-sm font-medium">{ url.LastChecked.Format("Jan 2, 15:04") }</p>
									</div>
								}

								<!-- Action Buttons -->
								<div class="flex space-x-2">
									<button data-check-url={ strconv.FormatUint(uint64(url.ID), 10) } class="check-url-btn flex-1 bg-accent-600 hover:bg-accent-700 text-white text-sm py-3 px-4 rounded-xl transition-all duration-300 font-semibold hover:scale-105">
										Check Now
									</button>
									<a href={ templ.URL("/edit/" + strconv.FormatUint(uint64(url.ID), 10)) } class="flex-1 bg-dark-700 hover:bg-dark-600 text-white text-sm py-3 px-4 rounded-xl transition-all duration-300 font-semibold text-center hover:scale-105">
										Edit
									</a>
									<button data-delete-url={ strconv.FormatUint(uint64(url.ID), 10) } class="delete-url-btn bg-red-600 hover:bg-red-700 text-white py-3 px-4 rounded-xl transition-all duration-300 hover:scale-105">
										<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
										</svg>
									</button>
								</div>
							</div>
						}
					</div>
				</div>
			}

			<!-- Add URL Modal -->
			<div id="add-url-modal" class="fixed inset-0 bg-black/60 backdrop-blur-sm hidden z-50">
				<div class="flex items-center justify-center min-h-screen p-4">
					<div class="glass-effect rounded-2xl p-8 w-full max-w-md animate-in">
						<div class="flex justify-between items-center mb-6">
							<h3 class="text-xl font-bold text-slate-100">Add New URL</h3>
							<button id="close-modal" class="text-slate-400 hover:text-white transition-colors p-2 hover:bg-dark-700 rounded-lg">
								<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
								</svg>
							</button>
						</div>
						<form action="/add" method="POST" class="space-y-5">
							<div>
								<label for="name" class="block text-sm font-semibold text-slate-200 mb-2">Website Name</label>
								<input type="text" id="name" name="name" required class="w-full px-4 py-3 bg-dark-800/50 border border-dark-600 rounded-xl text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-accent-500 focus:border-transparent transition-all" placeholder="My Website">
							</div>
							<div>
								<label for="url" class="block text-sm font-semibold text-slate-200 mb-2">URL</label>
								<input type="url" id="url" name="url" required class="w-full px-4 py-3 bg-dark-800/50 border border-dark-600 rounded-xl text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-accent-500 focus:border-transparent transition-all" placeholder="https://example.com">
							</div>
							<div>
								<label for="check_interval" class="block text-sm font-semibold text-slate-200 mb-2">Check Interval (seconds)</label>
								<input type="number" id="check_interval" name="check_interval" min="60" value="300" class="w-full px-4 py-3 bg-dark-800/50 border border-dark-600 rounded-xl text-white placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-accent-500 focus:border-transparent transition-all">
							</div>
							<div class="flex space-x-3 pt-4">
								<button type="button" id="cancel-modal" class="flex-1 px-6 py-3 bg-dark-700 hover:bg-dark-600 text-white rounded-xl transition-all duration-300 font-semibold">Cancel</button>
								<button type="submit" class="flex-1 px-6 py-3 bg-accent-600 hover:bg-accent-700 text-white rounded-xl transition-all duration-300 font-semibold glow-accent">Add URL</button>
							</div>
						</form>
					</div>
				</div>
			</div>

			<!-- Delete Confirmation Modal -->
			<div id="delete-modal" class="fixed inset-0 bg-black/60 backdrop-blur-sm hidden z-50">
				<div class="flex items-center justify-center min-h-screen p-4">
					<div class="glass-effect rounded-2xl p-8 w-full max-w-md">
						<div class="flex items-center mb-6">
							<div class="w-14 h-14 bg-red-500/20 rounded-2xl flex items-center justify-center mr-4">
								<svg class="w-7 h-7 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
								</svg>
							</div>
							<div>
								<h3 class="text-xl font-bold text-slate-100 mb-2">Delete URL</h3>
								<p class="text-slate-400">Are you sure you want to delete this URL? This action cannot be undone.</p>
							</div>
						</div>
						<div class="flex space-x-3">
							<button type="button" id="cancel-delete" class="flex-1 px-6 py-3 bg-dark-700 hover:bg-dark-600 text-white rounded-xl transition-all duration-300 font-semibold">Cancel</button>
							<button type="button" id="confirm-delete" class="flex-1 px-6 py-3 bg-red-600 hover:bg-red-700 text-white rounded-xl transition-all duration-300 font-semibold glow-red">Delete</button>
						</div>
					</div>
				</div>
			</div>
		</div>

		<script>
			// Modal functionality
			const modal = document.getElementById('add-url-modal');
			const addUrlBtn = document.getElementById('add-url-btn');
			const addFirstUrlBtn = document.getElementById('add-first-url-btn');
			const closeModal = document.getElementById('close-modal');
			const cancelModal = document.getElementById('cancel-modal');

			// Delete modal functionality
			const deleteModal = document.getElementById('delete-modal');
			const cancelDelete = document.getElementById('cancel-delete');
			const confirmDelete = document.getElementById('confirm-delete');
			let urlToDelete = null;

			// Open modal
			if (addUrlBtn) {
				addUrlBtn.addEventListener('click', () => {
					modal.classList.remove('hidden');
				});
			}

			if (addFirstUrlBtn) {
				addFirstUrlBtn.addEventListener('click', () => {
					modal.classList.remove('hidden');
				});
			}

			// Close modal
			closeModal.addEventListener('click', () => {
				modal.classList.add('hidden');
			});

			cancelModal.addEventListener('click', () => {
				modal.classList.add('hidden');
			});

			// Close modal when clicking outside
			modal.addEventListener('click', (e) => {
				if (e.target === modal) {
					modal.classList.add('hidden');
				}
			});

			// Delete modal event listeners
			cancelDelete.addEventListener('click', () => {
				deleteModal.classList.add('hidden');
				urlToDelete = null;
			});

			confirmDelete.addEventListener('click', async () => {
				if (urlToDelete) {
					try {
						const response = await fetch(`/api/urls/${urlToDelete}`, { method: 'DELETE' });
						if (response.ok) {
							location.reload();
						} else {
							alert('Failed to delete URL');
						}
					} catch (error) {
						alert('Error deleting URL');
					}
					deleteModal.classList.add('hidden');
					urlToDelete = null;
				}
			});

			// Close delete modal when clicking outside
			deleteModal.addEventListener('click', (e) => {
				if (e.target === deleteModal) {
					deleteModal.classList.add('hidden');
					urlToDelete = null;
				}
			});

			// Existing functionality
			document.addEventListener('DOMContentLoaded', function() {
				// Check single URL
				document.querySelectorAll('.check-url-btn').forEach(btn => {
					btn.addEventListener('click', async function() {
						const id = this.getAttribute('data-check-url');
						try {
							const response = await fetch(`/api/check/${id}`, { method: 'POST' });
							if (response.ok) {
								location.reload();
							} else {
								alert('Failed to check URL');
							}
						} catch (error) {
							alert('Error checking URL');
						}
					});
				});

				// Check all URLs
				const checkAllBtn = document.getElementById('check-all-btn');
				if (checkAllBtn) {
					checkAllBtn.addEventListener('click', async function() {
						try {
							const response = await fetch('/api/check-all', { method: 'POST' });
							if (response.ok) {
								location.reload();
							} else {
								alert('Failed to check URLs');
							}
						} catch (error) {
							alert('Error checking URLs');
						}
					});
				}

				// Delete URL
				document.querySelectorAll('.delete-url-btn').forEach(btn => {
					btn.addEventListener('click', function() {
						const id = this.getAttribute('data-delete-url');
						urlToDelete = id;
						deleteModal.classList.remove('hidden');
					});
				});
			});
		</script>
	}
}